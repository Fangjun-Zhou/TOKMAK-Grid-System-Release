using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using FinTOKMAK.GridSystem;

namespace FinTOKMAK.GridSystem.Square.Generator
{
    /// <summary>
    /// The event handler of various of grid event
    /// stores the selected grid GameObject
    /// can be used to find the Vertex in the GridSystem
    /// </summary>
    public class SquareGridEventHandler : MonoBehaviour, IGridEventHandler
    {
        #region Singleton

        private static Dictionary<int, SquareGridEventHandler> _instances = new Dictionary<int, SquareGridEventHandler>();

        /// <summary>
        /// The singleton of SquareGridEventHandler
        /// initialize when generated by the SquareGridGenerator
        /// </summary>
        public static Dictionary<int, SquareGridEventHandler> Instances
        {
            get
            {
                return _instances;
            }
            set
            {
                _instances = value;
            }
        }

        /// <summary>
        /// The ID of next generated event handler
        /// </summary>
        public static int nextGenerateID;

        #endregion
        
        #region Private Field

        /// <summary>
        /// The unique ID of current event handler
        /// </summary>
        private int eventID;

        /// <summary>
        /// The gameObject the cursor is pointing
        /// </summary>
        [SerializeField]
        private GameObject _currentGridObject;

        /// <summary>
        /// The GridElement of _currentGridObject
        /// </summary>
        [SerializeField]
        private GridElement _currentGridElement;
        
        /// <summary>
        /// The event triggered when currentGridObject changes
        /// </summary>
        private Action<int> _updateSelectedGrid;

        #endregion
        
        #region Public Field

        /// <summary>
        /// the ID of generator that generate this event handler
        /// initialize this field when generator first created this component
        /// </summary>
        public int generatorID;

        /// <summary>
        /// The GameObject the cursor is pointing
        /// </summary>
        public GameObject currentGridObject
        {
            get
            {
                return _currentGridObject;
            }
            set
            {
                _currentGridObject = value;
                // get the _currentGridElement
                _currentGridElement = _currentGridObject.GetComponent<GridElement>();
                // invoke updateGrid event
                // pass in the ID of current GridEventHandler
                _updateSelectedGrid?.Invoke(eventID);
            }
        }

        /// <summary>
        /// The GridElement of _currentGameObject
        /// </summary>
        public GridElement currentGridElement
        {
            get
            {
                return _currentGridElement;
            }
        }

        
        /// <summary>
        /// The event triggered when currentGridObject changes
        /// </summary>
        public Action<int> updateSelectedGrid
        {
            get
            {
                return _updateSelectedGrid;
            }
            set
            {
                _updateSelectedGrid = value;
            }
        }

        /// <summary>
        /// The max length of the detect ray
        /// </summary>
        public float maxRayLength;

        #endregion

        private void Awake()
        {
            
            // initialize the singleton
            if (!Instances.Values.Contains(this))
            {
                eventID = nextGenerateID;
                nextGenerateID++;
                Instances.Add(eventID, this);
            }
        }

        // Start is called before the first frame update
        void Start()
        {
            
        }

        // Update is called once per frame
        void Update()
        {
        }

        #region Private Methods
        
        

        #endregion
    }   
}
